name: Device Provisioning Deployment
on:
  workflow_dispatch:
    inputs:

      resource_group:
        description: 'Resource Group Name - setup in shell script'
        required: true
        default: 'dohoney-pareto-poc'

      azure_region:
        description: 'Azure Region'
        required: true
        default: 'westus'

# Environment Variables
env:
  HUB_RULE_NAME: "aruba-hub-rule"
  AZURE_FUNCTIONAPP_NAME: 'pareto-function-apps'  
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'    
  NODE_VERSION: '16.x' 
  DEVICE_NAME: 'iot-pareto-device'
  Config-hubname: ''
  Config-hubendpoint: ''
  Config-eventhubName: ''
  Config-namespaceName: ''
  Config-pubsubName: ''
  Config-psendpoint: ''
  Config-saName: ''
  Config-storageConnection: ''
  Config-sendAppSetting: ''
  SLOT: 'production'


jobs:
  build-and-deploy-infrastructure:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@main

    - uses: azure/login@v1
      with:
        creds: ${{ secrets.CLUSTER_SERVICE_PRINCIPAL }}

    - name: Install az cli 
      uses: ./.github/actions/install-az-cli

    # Create Device Provisioning Service
    - name: Create Device Provisioning Service
      shell: bash
      run: |
        dpsName="aruba-dps-$RANDOM"
        echo "Config-dpsName=$dpsName" >> $GITHUB_ENV
        az iot dps create --name $dpsName --resource-group ${{ github.event.inputs.resource_group }} --location ${{ github.event.inputs.azure_region }} --sku S1 --unit 1
        az iot dps linked-hub create --dps-name $dpsName --resource-group ${{ github.event.inputs.resource_group }} --connection-string ${{ env.Config-hubendpoint }} --location ${{ github.event.inputs.azure_region }}

    # Create Device Provisioning Service Enrollment
    - name: Create Device Provisioning Service Enrollment
      shell: bash
      run: |
        az iot dps enrollment create --dps-name ${{ env.Config-dpsName }} --resource-group ${{ github.event.inputs.resource_group }} --enrollment-id ${{ env.DEVICE_NAME }} --attestation-type symmetrickey --device-id ${{ env.DEVICE_NAME }}
        az iot dps enrollment show --dps-name ${{ env.Config-dpsName }} --resource-group ${{ github.event.inputs.resource_group }} --enrollment-id ${{ env.DEVICE_NAME }} --query attestation.symmetricKey.primaryKey

    # Create Device Provisioning Service Enrollment Group
    - name: Create Device Provisioning Service Enrollment Group
      shell: bash
      run: |
        az iot dps enrollment-group create --dps-name ${{ env.Config-dpsName }} --resource-group ${{ github.event.inputs.resource_group }} --enrollment-id ${{ env.DEVICE_NAME }} --attestation-type symmetrickey --device-id ${{ env.DEVICE_NAME }}
        az iot dps enrollment-group show   --dps-name ${{ env.Config-dpsName }} --resource-group ${{ github.event.inputs.resource_group }} --enrollment-id ${{ env.DEVICE_NAME }} --query attestation.symmetricKey.primaryKey

    - name: Print Device Connection data
      shell: bash
      run: |
        echo "DPS Primary Key: $(az iot dps policy show --dps-name ${{ env.Config-dpsName }} --resource-group ${{ github.event.inputs.resource_group }} --policy-name provisioningserviceowner --query primaryKey )"
        echo "Connection Variables: $(az iot dps policy show --dps-name ${{ env.Config-dpsName }} --resource-group ${{ github.event.inputs.resource_group }} --policy-name provisioningserviceowner )"
        echo "DPS ID Scope: $(az iot dps show --name ${{ env.Config-dpsName }} --resource-group ${{ github.event.inputs.resource_group }} --query properties.idScope -o tsv)"
      
